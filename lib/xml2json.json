"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\r\n    version=\"1.0\">\r\n \r\n    <!-- Turn off auto-insertion of <?xml> tag and set indenting on -->\r\n    <xsl:output method=\"text\" encoding=\"utf-8\" indent=\"yes\"/>\r\n \r\n    <!-- strip whitespace from whitespace-only nodes -->\r\n    <xsl:strip-space elements=\"*\"/>\r\n \r\n    <!-- create a key for every element in the document using its name --> \r\n    <xsl:key name=\"names\" match=\"*\" use=\"concat(generate-id(..),'/',name())\"/>\r\n \r\n    <!-- start with the root element -->\r\n    <xsl:template match=\"/\">\r\n        <!-- first element needs brackets around it as template does not do that -->\r\n        <xsl:text>{ </xsl:text>\r\n        <!-- call the template for elements using one unique name at a time -->\r\n        <xsl:apply-templates select=\"*[generate-id(.) = generate-id(key('names', concat(generate-id(..),'/',name()))[1])]\" >\r\n            <xsl:sort select=\"name()\"/>            \r\n        </xsl:apply-templates>\r\n        <xsl:text> }</xsl:text>\r\n    </xsl:template>\r\n \r\n    <!-- this template handles elements -->\r\n    <xsl:template match=\"*\">\r\n        <!-- count the number of elements with the same name -->\r\n        <xsl:variable name=\"kctr\" select=\"count(key('names', concat(generate-id(..),'/',name())))\"/>\r\n        <!-- iterate through by sets of elements with same name -->\r\n        <xsl:for-each select=\"key('names', concat(generate-id(..),'/',name()))\">\r\n            <!-- deal with the element name and start of multiple element block -->\r\n            <xsl:choose>\r\n                <xsl:when test=\"($kctr > 1) and (position() = 1)\">\r\n                    <xsl:text>\"</xsl:text>\r\n                    <xsl:value-of select=\"name()\"/>\r\n                    <xsl:text>\" : [ </xsl:text>\r\n                </xsl:when>\r\n                <xsl:when test=\"$kctr = 1\">\r\n                    <xsl:text>\"</xsl:text>\r\n                    <xsl:value-of select=\"name()\"/>\r\n                    <xsl:text>\" : </xsl:text>\r\n                </xsl:when>\r\n            </xsl:choose>\r\n            <!-- count number of elements, text nodes and attribute nodes -->\r\n            <xsl:variable name=\"nctr\" select=\"count(*|text()|@*)\"/>\r\n            <xsl:choose>\r\n                <xsl:when test=\"$nctr = 0\">\r\n                    <!-- no contents at all -->\r\n                    <xsl:text>null</xsl:text>\r\n                </xsl:when>\r\n                <xsl:otherwise>\r\n                    <xsl:variable name=\"ctr\" select=\"count(*)\"/>\r\n                    <xsl:variable name=\"tctr\" select=\"count(text())\"/>\r\n                    <xsl:variable name=\"actr\" select=\"count(@*)\"/>                    \r\n                    <!-- there will be contents so start an object -->\r\n                    <xsl:if test=\"$ctr > 0 or $actr > 0 or $tctr > 1\">\r\n                    <xsl:text>{ </xsl:text>\r\n                    </xsl:if>\r\n                    <!-- handle attribute nodes -->\r\n                    <xsl:if test=\"$actr > 0\">\r\n                        <xsl:apply-templates select=\"@*\"/>\r\n                        <xsl:if test=\"($tctr > 0) or ($ctr > 0)\">\r\n                            <xsl:text>, </xsl:text>\r\n                        </xsl:if>\r\n                    </xsl:if>\r\n                    <!-- call template for child elements one unique name at a time -->\r\n                    <xsl:if test=\"$ctr > 0\">\r\n                        <xsl:apply-templates select=\"*[generate-id(.) = generate-id(key('names', concat(generate-id(..),'/',name()))[1])]\">\r\n                            <xsl:sort select=\"name()\"/>\r\n                        </xsl:apply-templates>\r\n                        <xsl:if test=\"$tctr > 0\">\r\n                            <xsl:text>, </xsl:text>                            \r\n                        </xsl:if>\r\n                    </xsl:if>\r\n                    <!-- handle text nodes -->\r\n                    <xsl:choose>\r\n                        <xsl:when test=\"$tctr = 1\">\r\n                    <xsl:if test=\"$actr > 0\">\r\n                            <xsl:text>\"$\" : </xsl:text>\r\n                    </xsl:if>\r\n                            <xsl:apply-templates select=\"text()\"/>\r\n                        </xsl:when>\r\n                        <xsl:when test=\"$tctr > 1\">\r\n                            <xsl:text>\"$\" : [ </xsl:text>\r\n                            <xsl:apply-templates select=\"text()\"/>\r\n                            <xsl:text> ]</xsl:text>\r\n                        </xsl:when>\r\n                    </xsl:choose>\r\n                    <xsl:if test=\"$ctr > 0 or $actr > 0 or $tctr > 1\">\r\n                    <xsl:text> }</xsl:text>\r\n                    </xsl:if>\r\n                </xsl:otherwise>\r\n            </xsl:choose>\r\n            <!-- special processing if we are in multiple element block -->\r\n            <xsl:if test=\"$kctr > 1\">\r\n                <xsl:choose>\r\n                    <xsl:when test=\"position() = last()\">\r\n                        <xsl:text> ]</xsl:text>\r\n                    </xsl:when>\r\n                    <xsl:otherwise>\r\n                        <xsl:text>, </xsl:text>\r\n                    </xsl:otherwise>\r\n                </xsl:choose>                \r\n            </xsl:if>\r\n        </xsl:for-each>\r\n        <xsl:if test=\"position() != last()\">\r\n            <xsl:text>, </xsl:text>\r\n        </xsl:if>\r\n    </xsl:template>\r\n \r\n    <!-- this template handle text nodes -->\r\n    <xsl:template match=\"text()\">\r\n        <xsl:variable name=\"t\" select=\".\" />\r\n        <xsl:choose>\r\n            <!-- test to see if it is a number -->\r\n            <xsl:when test=\"string(number($t)) != 'NaN'\">\r\n                <xsl:value-of select=\"$t\"/>\r\n            </xsl:when>\r\n            <!-- deal with any case booleans -->\r\n            <xsl:when test=\"translate($t, 'TRUE', 'true') = 'true'\">\r\n                <xsl:text>true</xsl:text>\r\n            </xsl:when>\r\n            <xsl:when test=\"translate($t, 'FALSE', 'false') = 'false'\">\r\n                <xsl:text>false</xsl:text>\r\n            </xsl:when>\r\n            <!-- must be text -->\r\n            <xsl:otherwise>\r\n                <xsl:text>\"</xsl:text>\r\n                <xsl:value-of select=\"$t\"/>\r\n                <xsl:text>\"</xsl:text>                \r\n            </xsl:otherwise>\r\n        </xsl:choose>        \r\n        <xsl:if test=\"position() != last()\">\r\n            <xsl:text>, </xsl:text>\r\n        </xsl:if>        \r\n    </xsl:template>\r\n \r\n    <!-- this template handles attribute nodes -->\r\n    <xsl:template match=\"@*\">\r\n        <!-- attach prefix to attribute names -->\r\n        <xsl:text>\"</xsl:text>\r\n        <xsl:value-of select=\"name()\"/>\r\n        <xsl:text>\" : </xsl:text>\r\n        <xsl:variable name=\"t\" select=\".\" />\r\n        <xsl:choose>\r\n            <xsl:when test=\"string(number($t)) != 'NaN'\">\r\n                <xsl:value-of select=\"$t\"/>\r\n            </xsl:when>\r\n            <xsl:when test=\"translate($t, 'TRUE', 'true') = 'true'\">\r\n                <xsl:text>true</xsl:text>\r\n            </xsl:when>\r\n            <xsl:when test=\"translate($t, 'FALSE', 'false') = 'false'\">\r\n                <xsl:text>false</xsl:text>\r\n            </xsl:when>\r\n            <xsl:otherwise>\r\n                <xsl:text>\"</xsl:text>\r\n                <xsl:value-of select=\"$t\"/>\r\n                <xsl:text>\"</xsl:text>                \r\n            </xsl:otherwise>\r\n        </xsl:choose>        \r\n        <xsl:if test=\"position() != last()\">\r\n            <xsl:text>, </xsl:text>\r\n        </xsl:if>        \r\n    </xsl:template>\r\n \r\n</xsl:stylesheet>"